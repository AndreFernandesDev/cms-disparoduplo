"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// externals
const graphql = __importStar(require("graphql"));
// locals
const common_1 = require("../../common");
// noIDAlias verifies that the user did not alias any field as id which would conflict
//with the runtime's cache invalidation strategy
async function noIDAlias(config, docs) {
    // collect the errors
    const errors = [];
    for (const { filename, document } of docs) {
        graphql.visit(document, {
            Field(node, _, __, ___, ancestors) {
                const fieldType = (0, common_1.parentTypeFromAncestors)(config.schema, filename, ancestors).name;
                // if there is an alias on the node
                if (config.keyFieldsForType(fieldType).includes(node.alias?.value || '')) {
                    errors.push({
                        filepath: filename,
                        message: 'Encountered field with an alias that overwrites an id field',
                    });
                }
            },
        });
    }
    // if we got errors
    if (errors.length > 0) {
        throw errors;
    }
    // we're done here
    return;
}
exports.default = noIDAlias;
