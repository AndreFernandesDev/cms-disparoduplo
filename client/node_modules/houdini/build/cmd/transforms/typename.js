"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// externals
const graphql = __importStar(require("graphql"));
// locals
const common_1 = require("../../common");
const utils_1 = require("../utils");
// typename adds __typename to the selection set of any unions or interfaces
async function addTypename(config, documents) {
    // visit every document
    for (const doc of documents) {
        // update the document (graphql.visit is pure)
        doc.document = graphql.visit(doc.document, {
            Field(node, key, parent, path, ancestors) {
                // if we are looking at a leaf type
                if (!node.selectionSet) {
                    return;
                }
                // figure out the parent type
                const type = (0, common_1.parentTypeFromAncestors)(config.schema, doc.filename, ancestors.slice(0, -1));
                // look up the field definition in the parent type
                const field = type.getFields()[node.name.value];
                // look up the field in the parent
                const fieldType = (0, utils_1.unwrapType)(config, field.type).type;
                // if we are looking at an interface
                if (graphql.isInterfaceType(fieldType) || graphql.isUnionType(fieldType)) {
                    // add the __typename selection to the field's selection set
                    return {
                        ...node,
                        selectionSet: {
                            ...node.selectionSet,
                            selections: [
                                ...node.selectionSet.selections,
                                {
                                    kind: 'Field',
                                    name: {
                                        kind: 'Name',
                                        value: '__typename',
                                    },
                                },
                            ],
                        },
                    };
                }
            },
        });
    }
}
exports.default = addTypename;
