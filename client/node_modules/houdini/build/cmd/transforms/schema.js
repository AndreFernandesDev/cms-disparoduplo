"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// externals
const schema_1 = require("@graphql-tools/schema");
const graphql = __importStar(require("graphql"));
const types_1 = require("../../runtime/lib/types");
// graphqlExtensions adds a few different things to the graphql schema
async function graphqlExtensions(config, documents) {
    // the bits to add to the schema
    const internalSchema = `
enum CachePolicy {
	${types_1.CachePolicy.CacheAndNetwork}
	${types_1.CachePolicy.CacheOnly}
	${types_1.CachePolicy.CacheOrNetwork}
	${types_1.CachePolicy.NetworkOnly}
}

"""
	@${config.listDirective} is used to mark a field for the runtime as a place to add or remove
	entities in mutations
"""
directive @${config.listDirective}(${config.listNameArg}: String!, connection: Boolean) on FIELD

"""
	@${config.paginateDirective} is used to to mark a field for pagination.
	More info in the [doc](https://www.houdinigraphql.com/guides/pagination).
"""
directive @${config.paginateDirective}(${config.paginateNameArg}: String) on FIELD

"""
	@${config.listPrependDirective} is used to tell the runtime to add the result to the end of the list
"""
directive @${config.listPrependDirective}(
	${config.listDirectiveParentIDArg}: ID
) on FRAGMENT_SPREAD

"""
	@${config.listAppendDirective} is used to tell the runtime to add the result to the start of the list
"""
directive @${config.listAppendDirective}(${config.listDirectiveParentIDArg}: ID) on FRAGMENT_SPREAD

"""
	@${config.listParentDirective} is used to provide a parentID without specifying position or in situations
	where it doesn't make sense (eg when deleting a node.)
"""
directive @${config.listParentDirective}(value: ID!) on FRAGMENT_SPREAD

"""
	@${config.whenDirective} is used to provide a conditional or in situations where it doesn't make sense (eg when removing or deleting a node.)
"""
directive @${config.whenDirective} on FRAGMENT_SPREAD

"""
	@${config.whenNotDirective} is used to provide a conditional or in situations where it doesn't make sense (eg when removing or deleting a node.)
"""
directive @${config.whenNotDirective} on FRAGMENT_SPREAD

"""
	@${config.argumentsDirective} is used to define the arguments of a fragment
"""
directive @${config.argumentsDirective} on FRAGMENT_DEFINITION

"""
	@${config.cacheDirective} is used to specify cache rules for a query
"""
directive @${config.cacheDirective}(${config.cachePolicyArg}: CachePolicy, ${config.cachePartialArg}: Boolean) on QUERY
`;
    config.newSchema += internalSchema;
    // add the static extra bits that will be used by other transforms
    config.schema = (0, schema_1.mergeSchemas)({
        schemas: [config.schema, graphql.buildSchema(internalSchema)],
    });
}
exports.default = graphqlExtensions;
