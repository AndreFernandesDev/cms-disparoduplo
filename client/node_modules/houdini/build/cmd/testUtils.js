"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockCollectedDoc = exports.pipelineTest = void 0;
// externals
const graphql = __importStar(require("graphql"));
// locals
const common_1 = require("../common");
const generate_1 = require("./generate");
const types_1 = require("../runtime/lib/types");
function pipelineTest(title, documents, shouldPass, testBody) {
    test(title, async function () {
        // the first thing to do is to create the list of collected documents
        const docs = documents.map(mockCollectedDoc);
        // we need to trap if we didn't fail
        let error = [];
        try {
            // apply the transforms
            await (0, generate_1.runPipeline)((0, common_1.testConfig)(), docs);
        }
        catch (e) {
            // only bubble the error up if we're supposed to pass the test
            if (shouldPass) {
                throw e;
            }
            error = e;
        }
        // if we shouldn't pass but we did, we failed the test
        if (!shouldPass && error.length === 0) {
            fail('did not fail test');
            return;
        }
        // run the rest of the test
        if (testBody) {
            // @ts-ignore
            // invoke the test body with the error instead of the documents
            testBody(shouldPass ? docs : error);
        }
    });
}
exports.pipelineTest = pipelineTest;
function mockCollectedDoc(query) {
    const parsed = graphql.parse(query);
    // look at the first definition in the pile for the name
    // @ts-ignore
    const name = parsed.definitions[0].name.value;
    const operations = parsed.definitions;
    // figure out the document kind
    let kind = types_1.ArtifactKind.Fragment;
    if (operations.length === 1) {
        // the document kind depends on the artifact
        // query
        if (operations[0].kind === 'OperationDefinition' && operations[0].operation === 'query') {
            kind = types_1.ArtifactKind.Query;
        }
        // mutation
        else if (operations[0].kind === 'OperationDefinition' &&
            operations[0].operation === 'mutation') {
            kind = types_1.ArtifactKind.Mutation;
        }
        // subscription
        else if (operations[0].kind === 'OperationDefinition' &&
            operations[0].operation === 'subscription') {
            kind = types_1.ArtifactKind.Subcription;
        }
    }
    return {
        name,
        kind,
        document: parsed,
        originalDocument: parsed,
        filename: `${name}.ts`,
        generateArtifact: true,
        generateStore: true,
        originalString: query,
    };
}
exports.mockCollectedDoc = mockCollectedDoc;
