"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.enumDeclaration = exports.scalarPropertyValue = exports.nullableField = exports.readonlyProperty = void 0;
// externals
const recast = __importStar(require("recast"));
const graphql = __importStar(require("graphql"));
const AST = recast.types.builders;
function readonlyProperty(prop, enable = true) {
    if (enable) {
        prop.readonly = true;
    }
    return prop;
}
exports.readonlyProperty = readonlyProperty;
function nullableField(inner, input = false) {
    // the members of the union
    const members = [inner, AST.tsNullKeyword()];
    if (input) {
        members.push(AST.tsUndefinedKeyword());
    }
    return AST.tsUnionType(members);
}
exports.nullableField = nullableField;
function scalarPropertyValue(config, missingScalars, target) {
    switch (target.name) {
        case 'String': {
            return AST.tsStringKeyword();
        }
        case 'Int': {
            return AST.tsNumberKeyword();
        }
        case 'Float': {
            return AST.tsNumberKeyword();
        }
        case 'Boolean': {
            return AST.tsBooleanKeyword();
        }
        case 'ID': {
            return AST.tsStringKeyword();
        }
        default: {
            // if we're looking at a non-null type
            if (graphql.isNonNullType(target)) {
                return scalarPropertyValue(config, missingScalars, target.ofType);
            }
            // the type could be a custom scalar we know about
            if (config.scalars?.[target.name]) {
                return AST.tsTypeReference(AST.identifier(config.scalars?.[target.name].type));
            }
            missingScalars.add(target.name);
            return AST.tsAnyKeyword();
        }
    }
}
exports.scalarPropertyValue = scalarPropertyValue;
function enumDeclaration(type) {
    return AST.tsEnumDeclaration(AST.identifier(type.name), type
        .getValues()
        .map((value) => AST.tsEnumMember(AST.identifier(value.name), AST.stringLiteral(value.name))));
}
exports.enumDeclaration = enumDeclaration;
