"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tsTypeReference = void 0;
// externals
const recast = __importStar(require("recast"));
const graphql = __importStar(require("graphql"));
const utils_1 = require("../../utils");
const types_1 = require("./types");
const AST = recast.types.builders;
// return the property
function tsTypeReference(config, missingScalars, definition) {
    const { type, wrappers } = (0, utils_1.unwrapType)(config, definition.type);
    // convert the inner type
    let result;
    // if we're looking at a scalar
    if (graphql.isScalarType(type)) {
        result = (0, types_1.scalarPropertyValue)(config, missingScalars, type);
    }
    // we're looking at an object
    else {
        // the fields of the object end up as properties in the type literal
        result = AST.tsTypeReference(AST.identifier(type.name));
    }
    for (const toWrap of wrappers) {
        // if its a non-null we don't need to add anything
        if (toWrap === utils_1.TypeWrapper.NonNull) {
            continue;
        }
        else if (toWrap === utils_1.TypeWrapper.Nullable) {
            result = (0, types_1.nullableField)(result, true);
        }
        // it could be a list
        else if (toWrap === utils_1.TypeWrapper.List) {
            result = AST.tsArrayType(AST.tsParenthesizedType(result));
        }
    }
    return result;
}
exports.tsTypeReference = tsTypeReference;
