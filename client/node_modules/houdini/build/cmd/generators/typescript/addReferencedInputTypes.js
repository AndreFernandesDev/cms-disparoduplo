"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addReferencedInputTypes = void 0;
// externals
const recast = __importStar(require("recast"));
const graphql = __importStar(require("graphql"));
// locals
const common_1 = require("../../../common");
const utils_1 = require("../../utils");
const typeReference_1 = require("./typeReference");
const AST = recast.types.builders;
// add any object types found in the input
function addReferencedInputTypes(config, filepath, body, visitedTypes, missingScalars, rootType) {
    // try to find the name of the type
    const { type } = (0, utils_1.unwrapType)(config, rootType);
    // if we are looking at a scalar
    if (graphql.isScalarType(type)) {
        // we're done
        return;
    }
    // if we have already processed this type, dont do anything
    if (visitedTypes.has(type.name)) {
        return;
    }
    // if we ran into a union
    if (graphql.isUnionType(type)) {
        // we don't support them yet
        throw { filepath, message: 'Input Unions are not supported yet. Sorry!' };
    }
    // track that we are processing the type
    visitedTypes.add(type.name);
    // if we ran into an enum, add its definition to the file
    if (graphql.isEnumType(type)) {
        // we need to add an import for the enum
        (0, common_1.ensureImports)({
            config,
            // @ts-ignore
            body,
            import: [type.name],
            sourceModule: '$houdini/graphql/enums',
            importKind: 'type',
        });
        return;
    }
    // we found an object type so build up the list of fields (and walk down any object fields)
    const members = [];
    for (const field of Object.values(type.getFields())) {
        // walk down the referenced fields and build stuff back up
        addReferencedInputTypes(config, filepath, body, visitedTypes, missingScalars, field.type);
        // check if the type is optional so we can label the value as omitable
        members.push(AST.tsPropertySignature(AST.identifier(field.name), AST.tsTypeAnnotation((0, typeReference_1.tsTypeReference)(config, missingScalars, field)), graphql.isNullableType(field.type)));
    }
    // add the type def to the body
    body.push(AST.tsTypeAliasDeclaration(AST.identifier(type.name), AST.tsTypeLiteral(members)));
}
exports.addReferencedInputTypes = addReferencedInputTypes;
