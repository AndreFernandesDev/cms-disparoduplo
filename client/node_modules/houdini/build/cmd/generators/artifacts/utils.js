"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertValue = exports.deepMerge = exports.serializeValue = void 0;
const recast = __importStar(require("recast"));
const graphql = __importStar(require("graphql"));
const AST = recast.types.builders;
function serializeValue(value) {
    // if we are serializing a list
    if (Array.isArray(value)) {
        // return an array expression with every element serialize
        return AST.arrayExpression(value.map(serializeValue));
    }
    // if we are serializing an object
    if (typeof value === 'object' && value !== null) {
        return AST.objectExpression(Object.entries(value)
            .filter(([, value]) => typeof value !== 'undefined')
            .map(([key, value]) => AST.objectProperty(AST.identifier(key), serializeValue(value))));
    }
    // if we are serializing a string
    if (typeof value === 'string') {
        // if there are new lines, use a template. otherwise, just use a string
        if (value.indexOf('\n') !== -1) {
            return AST.templateLiteral([AST.templateElement({ raw: value, cooked: value }, true)], []);
        }
        return AST.stringLiteral(value);
    }
    // anything else can just use its literal value
    return AST.literal(value);
}
exports.serializeValue = serializeValue;
function deepMerge(filepath, ...targets) {
    // look at the first target to know what type we're merging
    // if we aren't looking at an object
    if (typeof targets[0] !== 'object') {
        // make sure all of the values are the same
        const matches = targets.filter((val) => val !== targets[0]).length === 0;
        if (!matches) {
            throw { filepath, message: 'could not merge: ' + targets };
        }
        // return the matching value
        return targets[0];
    }
    // if we are looking at a list of lists
    if (Array.isArray(targets[0])) {
        return targets[0].concat(...targets.slice(1));
    }
    // collect all of the fields that the targets specify and map them to their value
    const fields = {};
    for (const target of targets) {
        // add every field of the target to the bag
        for (const [key, value] of Object.entries(target)) {
            // if we haven't seen the key before
            if (!fields[key]) {
                // save it as a list
                fields[key] = [];
            }
            fields[key].push(value);
        }
    }
    return Object.fromEntries(Object.entries(fields).map(([key, value]) => [key, deepMerge(filepath, ...value)]));
}
exports.deepMerge = deepMerge;
function convertValue(val) {
    // figure out the value to use
    let value;
    let kind;
    // the value of the arg is always going to be a
    if (val.kind === graphql.Kind.INT) {
        value = parseInt(val.value, 10);
        kind = 'Int';
    }
    else if (val.kind === graphql.Kind.FLOAT) {
        value = parseFloat(val.value);
        kind = 'Float';
    }
    else if (val.kind === graphql.Kind.BOOLEAN) {
        value = val.value;
        kind = 'Boolean';
    }
    else if (val.kind === graphql.Kind.VARIABLE) {
        value = val.name.value;
        kind = 'Variable';
    }
    else if (val.kind === graphql.Kind.STRING) {
        value = val.value;
        kind = 'String';
    }
    return { kind, value };
}
exports.convertValue = convertValue;
