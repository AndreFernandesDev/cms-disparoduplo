"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.inputObject = void 0;
// externals
const recast = __importStar(require("recast"));
const graphql = __importStar(require("graphql"));
const utils_1 = require("../../utils");
const AST = recast.types.builders;
function inputObject(config, inputs) {
    // make sure we don't define the same input type
    const visitedTypes = new Set();
    // inputs can be recursive so we can't flatten the input type into a single object
    const inputObj = {
        fields: inputs.reduce((fields, input) => {
            // find the inner type
            const { type } = (0, utils_1.unwrapType)(config, input.type);
            // embed the type in the input
            return {
                ...fields,
                [input.variable.name.value]: type.name,
            };
        }, {}),
        types: {},
    };
    // walk through every type referenced and add it to the list
    for (const input of inputs) {
        walkInputs(config, visitedTypes, inputObj, input.type);
    }
    return inputObj;
}
exports.inputObject = inputObject;
function walkInputs(config, visitedTypes, inputObj, rootType) {
    // find the core type
    const { type } = (0, utils_1.unwrapType)(config, rootType);
    // if we've seen this type already
    if (visitedTypes.has(type.name)) {
        // don't do anything else
        return;
    }
    // if this is a scalar or enum then we don't need to add anything to the type object
    if (graphql.isEnumType(type) || graphql.isScalarType(type)) {
        return;
    }
    if (graphql.isUnionType(type)) {
        return;
    }
    // we haven't seen this type before and are about to generate the type
    visitedTypes.add(type.name);
    // generate the entry for the type
    inputObj.types[type.name] = Object.values(type.getFields()).reduce((typeFields, field) => {
        const { type: fieldType } = (0, utils_1.unwrapType)(config, field.type);
        // keep walking down
        walkInputs(config, visitedTypes, inputObj, fieldType);
        return {
            ...typeFields,
            [field.name]: fieldType.toString(),
        };
    }, {});
}
