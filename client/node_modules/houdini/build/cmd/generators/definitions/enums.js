"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// external imports
const graphql = __importStar(require("graphql"));
const recast = __importStar(require("recast"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("../../utils");
const AST = recast.types.builders;
// the enum generator creates runtime definitions and centralizes the type definitions in a
// single place to avoid conflicting exported types
async function definitionsGenerator(config) {
    // grab every enum definition in the project's schema
    const enums = graphql
        .parse(graphql.printSchema(config.schema))
        .definitions.filter((definition) => definition.kind === 'EnumTypeDefinition').filter((def) => !config.isInternalEnum(def));
    // generate the runtime definitions
    const runtimeDefinitions = recast.print(AST.program(enums.map((defn) => {
        const name = defn.name.value;
        return (0, utils_1.moduleExport)(config, name, AST.objectExpression(defn.values?.map((value) => {
            const str = value.name.value;
            return AST.objectProperty(AST.stringLiteral(str), AST.stringLiteral(str));
        }) || []));
    }))).code;
    // generate the type definitions
    const typeDefinitions = enums
        .map((definition) => `
export declare enum ${definition.name.value} {
${definition.values?.map((value) => `    ${value.name.value} = "${value.name.value}"`).join(',\n')}
}
 `)
        .join('');
    // the index file for the definitions directory
    const definitionsIndex = `
export * from './enums'
	`;
    // write the typedefinition to disk
    await Promise.all([
        (0, utils_1.writeFile)(config.enumTypesDefinitionsPath, typeDefinitions),
        (0, utils_1.writeFile)(config.enumRuntimeDefinitionsPath, runtimeDefinitions),
        (0, utils_1.writeFile)(path_1.default.join(config.definitionsDirectory, 'index.js'), definitionsIndex),
        (0, utils_1.writeFile)(path_1.default.join(config.definitionsDirectory, 'index.d.ts'), definitionsIndex),
    ]);
}
exports.default = definitionsGenerator;
