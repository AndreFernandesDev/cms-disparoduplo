"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// externals
const path_1 = __importDefault(require("path"));
const utils_1 = require("../../utils");
// every document in the application should be re-exported from the root. this allows the user to balance
// code-splitting concerns with the "cleanliness" of importing from a single location
async function writeIndexFile(config, docs) {
    // the directories we want to export
    const runtimeDir = './' + path_1.default.relative(config.rootDir, config.runtimeDirectory).split(path_1.default.sep).join('/');
    const artifactDir = './' + path_1.default.relative(config.rootDir, config.artifactDirectory).split(path_1.default.sep).join('/');
    const storesDir = './' + path_1.default.relative(config.rootDir, config.storesDirectory).split(path_1.default.sep).join('/');
    const definitionsDir = './' + path_1.default.relative(config.rootDir, config.definitionsDirectory).split(path_1.default.sep).join('/');
    const configPath = path_1.default.relative(config.rootDir, config.filepath).split(path_1.default.sep).join('/');
    // if we are rendering an index file for sapper we need to compile it for commonjs
    let body = '';
    if (config.module === 'commonjs') {
        body = `${utils_1.cjsIndexFilePreamble}

${(0, utils_1.exportDefaultFrom)(configPath, 'houdiniConfig')}

${(0, utils_1.exportStarFrom)(runtimeDir)}
${(0, utils_1.exportStarFrom)(artifactDir)}
${(0, utils_1.exportStarFrom)(definitionsDir)}
`;
    }
    // otherwise just use esm statements as the final result
    else {
        body = `
export { default as houdiniConfig } from "${configPath}"
export * from "${runtimeDir}"
export * from "${artifactDir}"
export * from "${storesDir}"
export * from "${definitionsDir}"
`;
    }
    // write the index file that exports the runtime
    await (0, utils_1.writeFile)(path_1.default.join(config.rootDir, 'index.js'), body);
}
exports.default = writeIndexFile;
