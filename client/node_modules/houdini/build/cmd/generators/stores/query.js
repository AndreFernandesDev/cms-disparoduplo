"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateIndividualStoreQuery = void 0;
const graphql = __importStar(require("graphql"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("../../utils");
const pagination_1 = __importDefault(require("./pagination"));
async function generateIndividualStoreQuery(config, doc) {
    const fileName = doc.name;
    const storeName = config.storeName(doc);
    const artifactName = `${doc.name}`;
    const paginationExtras = (0, pagination_1.default)(config, doc, 'query');
    // store definition
    const storeData = `import { houdiniConfig } from '$houdini';
import { queryStore } from '../runtime/stores'
import artifact from '../artifacts/${artifactName}'
import { defaultConfigValues } from '../runtime/lib'

// create the query store
const factory = () => queryStore({
    artifact,
    config: defaultConfigValues(houdiniConfig),
    storeName: ${JSON.stringify(storeName)},
    paginated: ${JSON.stringify(Boolean(doc.refetch?.paginated))},
    paginationMethods: ${JSON.stringify(paginationExtras.methods, null, 4).replaceAll('\n', '\n    ')}
})

export const ${storeName} = factory()

export const ${config.storeFactoryName(artifactName)} = factory

export default ${storeName}
`;
    // look for the operation
    const operations = doc.document.definitions.filter(({ kind }) => kind === graphql.Kind.OPERATION_DEFINITION);
    const inputs = operations[0]?.variableDefinitions;
    const withVariableInputs = inputs && inputs.length > 0;
    const VariableInputsType = withVariableInputs ? `${artifactName}$input` : 'null';
    // type definitions
    const typeDefs = `import type { ${artifactName}$input, ${artifactName}$result, CachePolicy } from '$houdini'
import { type QueryStore } from '../runtime/lib/types'
${paginationExtras.typeImports}

export declare const ${storeName}: QueryStore<${artifactName}$result | undefined, ${VariableInputsType}, ${paginationExtras.storeExtras}> ${paginationExtras.types}

export declare const ${config.storeFactoryName(artifactName)}: () => typeof ${storeName}

export default ${storeName}
`;
    await Promise.all([
        (0, utils_1.writeFile)(path_1.default.join(config.storesDirectory, `${fileName}.js`), storeData),
        (0, utils_1.writeFile)(path_1.default.join(config.storesDirectory, `${fileName}.d.ts`), typeDefs),
    ]);
    return fileName;
}
exports.generateIndividualStoreQuery = generateIndividualStoreQuery;
