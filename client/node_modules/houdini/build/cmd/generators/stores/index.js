"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const types_1 = require("../../types");
const utils_1 = require("../../utils");
const fragment_1 = require("./fragment");
const mutation_1 = require("./mutation");
const query_1 = require("./query");
const subscription_1 = require("./subscription");
async function storesGenerator(config, docs) {
    const listOfStores = [];
    await Promise.all(docs.map(async (doc) => {
        // if the doc is not meant to be generated, skip it
        if (!doc.generateStore) {
            return;
        }
        if (doc.kind === types_1.ArtifactKind.Query) {
            listOfStores.push(await (0, query_1.generateIndividualStoreQuery)(config, doc));
        }
        else if (doc.kind === types_1.ArtifactKind.Mutation) {
            listOfStores.push(await (0, mutation_1.generateIndividualStoreMutation)(config, doc));
        }
        else if (doc.kind === types_1.ArtifactKind.Subcription) {
            listOfStores.push(await (0, subscription_1.generateSubscriptionStore)(config, doc));
        }
        else if (doc.kind === types_1.ArtifactKind.Fragment) {
            listOfStores.push(await (0, fragment_1.generateFragmentStore)(config, doc));
        }
    }));
    const dataIndex = listOfStores
        .filter((c) => c !== null)
        .map((c) => `export * from './${c}'`)
        .join(`\n`);
    await (0, utils_1.writeFile)(path_1.default.join(config.rootDir, 'stores', `index.js`), dataIndex);
    const dataIndexDTs = `import type { DataSource } from '$houdini/runtime'

export type Result<DataType> = {
	isFetching: boolean
	partial: boolean
	source?: DataSource | null
	data?: DataType | null
	error?: Error | null
}`;
    await (0, utils_1.writeFile)(path_1.default.join(config.rootDir, 'stores', `index.d.ts`), dataIndexDTs + `\n` + dataIndex);
}
exports.default = storesGenerator;
