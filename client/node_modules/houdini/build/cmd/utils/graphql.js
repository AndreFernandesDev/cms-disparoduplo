"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeWrapper = exports.wrapType = exports.unwrapType = void 0;
const graphql = __importStar(require("graphql"));
function unwrapType(config, type, wrappers = []) {
    // if we are looking at a non null type
    if (type.kind === 'NonNullType') {
        return unwrapType(config, type.type, [TypeWrapper.NonNull, ...wrappers]);
    }
    if (type instanceof graphql.GraphQLNonNull) {
        return unwrapType(config, type.ofType, [TypeWrapper.NonNull, ...wrappers]);
    }
    // if the last thing we added was not a non-null indicator
    if (wrappers[0] !== TypeWrapper.NonNull) {
        // add the nullable mark
        wrappers.unshift(TypeWrapper.Nullable);
    }
    if (type.kind === 'ListType') {
        return unwrapType(config, type.type, [TypeWrapper.List, ...wrappers]);
    }
    if (type instanceof graphql.GraphQLList) {
        return unwrapType(config, type.ofType, [TypeWrapper.List, ...wrappers]);
    }
    // get the named type
    const namedType = config.schema.getType(type.name.value || type.name);
    if (!namedType) {
        throw new Error('Could not unwrap type: ' + JSON.stringify(type));
    }
    // don't add any wrappers
    return { type: namedType, wrappers };
}
exports.unwrapType = unwrapType;
function wrapType({ type, wrappers, }) {
    const head = wrappers[0];
    const tail = wrappers.slice(1);
    let kind = 'NamedType';
    if (head === TypeWrapper.List) {
        kind = 'ListType';
    }
    else if (head === TypeWrapper.NonNull) {
        kind = 'NonNullType';
    }
    if (kind === 'NamedType') {
        return {
            kind,
            name: {
                kind: 'Name',
                value: type.name,
            },
        };
    }
    return {
        kind,
        // @ts-ignore
        type: wrapType({ type, wrappers: tail }),
    };
}
exports.wrapType = wrapType;
var TypeWrapper;
(function (TypeWrapper) {
    TypeWrapper["Nullable"] = "Nullable";
    TypeWrapper["List"] = "List";
    TypeWrapper["NonNull"] = "NonNull";
})(TypeWrapper = exports.TypeWrapper || (exports.TypeWrapper = {}));
