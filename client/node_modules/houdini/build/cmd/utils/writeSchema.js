"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeSchema = void 0;
const graphql = __importStar(require("graphql"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const writeFile_1 = require("./writeFile");
async function writeSchema(url, schemaPath, headers) {
    // the headers to include are a list of strings in KEY=VALUE format
    const moreHeaders = headers?.reduce((total, header) => {
        const [key, value] = header.split('=');
        return {
            ...total,
            [key]: value,
        };
    }, {});
    // send the request
    const resp = await (0, node_fetch_1.default)(url, {
        method: 'POST',
        body: JSON.stringify({
            query: graphql.getIntrospectionQuery(),
        }),
        headers: { 'Content-Type': 'application/json', ...moreHeaders },
    });
    const content = await resp.text();
    try {
        const jsonSchema = JSON.parse(content).data;
        const schema = graphql.buildClientSchema(jsonSchema);
        // Check if the schemapath ends with .gql or .graphql - if so write the schema as string
        // Otherwise write the json/introspection
        if (schemaPath.endsWith('gql') || schemaPath.endsWith('graphql')) {
            const schemaAsString = graphql.printSchema(graphql.lexicographicSortSchema(schema));
            await (0, writeFile_1.writeFile)(schemaPath, schemaAsString);
        }
        else {
            await (0, writeFile_1.writeFile)(schemaPath, JSON.stringify(jsonSchema));
        }
        // return the schema for usage in --pull-schema
        return schema;
    }
    catch (e) {
        console.log('encountered error parsing response as json: ' + e.message);
        console.log('full body: ' + content);
        process.exit(0);
    }
}
exports.writeSchema = writeSchema;
