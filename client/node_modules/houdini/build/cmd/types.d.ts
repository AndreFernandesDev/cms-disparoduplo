import type * as graphql from 'graphql';
export type { ConfigFile } from '../runtime/lib';
export * from '../runtime/lib/types';
import { BaseCompiledDocument, ArtifactKind } from '../runtime/lib/types';
export declare type CollectedGraphQLDocument = {
    kind: ArtifactKind;
    filename: string;
    name: string;
    document: graphql.DocumentNode;
    originalDocument: graphql.DocumentNode;
    generateArtifact: boolean;
    generateStore: boolean;
    originalString: string;
    refetch?: BaseCompiledDocument['refetch'];
};
export declare type HoudiniDocumentError = graphql.GraphQLError & {
    filepath: string;
};
export declare const HoudiniErrorTodo: ErrorConstructor;
export declare type HoudiniInfoError = {
    message: string;
    description?: string[];
};
export declare type HoudiniError = HoudiniDocumentError | HoudiniInfoError | Error;
