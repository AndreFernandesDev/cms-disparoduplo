"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.paginatedQuery = exports.query = void 0;
// externals
const store_1 = require("svelte/store");
// locals
const types_1 = require("../lib/types");
const pagination_1 = require("../lib/pagination");
const context_1 = require("../lib/context");
function query(document) {
    // make sure we got a query document
    if (document.kind !== 'HoudiniQuery') {
        throw new Error('query() must be passed a query document');
    }
    // build some derived stores for the atomic values
    const data = (0, store_1.derived)(document.store, ($store) => $store.data);
    const loading = (0, store_1.derived)(document.store, ($store) => $store.isFetching);
    const partial = (0, store_1.derived)(document.store, ($store) => $store.partial);
    const errors = (0, store_1.derived)(document.store, ($store) => $store.errors);
    // load the current houdini context
    const context = (0, context_1.getHoudiniContext)();
    return {
        ...document.store,
        data,
        refetch: (variables, config) => {
            return document.store.fetch({
                context,
                variables,
                policy: types_1.CachePolicy.NetworkOnly,
                ...config,
            });
        },
        errors,
        loading,
        partial,
    };
}
exports.query = query;
function paginatedQuery(document) {
    // TODO: fix type checking paginated
    // @ts-ignore: the query store will only include the methods when it needs to
    // and the userland type checking happens as part of the query type generation
    return (0, pagination_1.wrapPaginationStore)(query(document));
}
exports.paginatedQuery = paginatedQuery;
