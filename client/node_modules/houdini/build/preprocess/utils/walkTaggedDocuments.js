"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// externals
const graphql = __importStar(require("graphql"));
const estree_walker_1 = require("estree-walker");
const recast = __importStar(require("recast"));
// locals
const common_1 = require("../../common");
const types_1 = require("../../runtime/lib/types");
const AST = recast.types.builders;
// yield the tagged graphql documents contained within the provided AST
async function walkTaggedDocuments(config, doc, parsedScript, walker) {
    // @ts-ignore
    await (0, estree_walker_1.asyncWalk)(parsedScript, {
        async enter(node, parent) {
            // if we are looking at the graphql template tag
            if (node.type === 'TaggedTemplateExpression' &&
                node.tag.name === 'graphql') {
                const expr = node;
                // we're going to replace the tag with something the runtime can use
                // first, lets parse the tag contents to get the info we need
                const tagContent = expr.quasi.quasis[0].value.raw;
                const parsedTag = graphql.parse(tagContent);
                // make sure there is only one definition
                if (parsedTag.definitions.length > 1) {
                    throw new Error('Encountered multiple definitions in a tag');
                }
                // if there is a predicate and the graphql tag does not satisfy it
                if (walker.where && !walker.where(parsedTag)) {
                    // ignore the tag
                    return;
                }
                // pull out the name of the thing
                const definition = parsedTag.definitions[0];
                const name = definition.name?.value;
                if (!name) {
                    throw new Error('Could not find definition name');
                }
                let kind;
                if (definition.kind === 'FragmentDefinition') {
                    kind = types_1.CompiledFragmentKind;
                }
                else {
                    if (definition.operation === 'query') {
                        kind = types_1.CompiledQueryKind;
                    }
                    else if (definition.operation === 'mutation') {
                        kind = types_1.CompiledMutationKind;
                    }
                    else {
                        kind = types_1.CompiledSubscriptionKind;
                    }
                }
                // the location for the document artifact
                const documentPath = doc.config.artifactPath(parsedTag);
                // make sure we watch the compiled fragment
                doc.dependencies.push(documentPath);
                // if there is a query in the document, we want to add an import to the module script
                // doing it here ensures that we don't import the config since we can guarantee
                // that the import only ends up in the module script
                // make sure there is a module script
                if (!doc.module) {
                    doc.module = {
                        start: 0,
                        end: 0,
                        // @ts-ignore
                        content: AST.program([]),
                    };
                }
                // add the imports if they're not there
                (0, common_1.ensureImports)({
                    config,
                    body: doc.module.content.body,
                    import: ['houdiniConfig'],
                    sourceModule: '$houdini',
                });
                // invoker the walker's callback with the right context
                await walker.onTag({
                    parsedDocument: parsedTag,
                    node: {
                        ...node,
                        ...this,
                        remove: this.remove,
                        replaceWith: this.replace,
                    },
                    artifact: {
                        name,
                        kind,
                    },
                    parent,
                    tagContent,
                });
            }
        },
    });
}
exports.default = walkTaggedDocuments;
