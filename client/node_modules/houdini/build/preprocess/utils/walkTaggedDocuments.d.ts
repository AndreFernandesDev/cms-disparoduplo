import * as graphql from 'graphql';
import { BaseNode } from 'estree-walker';
import * as recast from 'recast';
import { Config } from '../../common';
import { CompiledDocumentKind } from '../../runtime/lib/types';
import { TransformDocument } from '../types';
declare type Program = ReturnType<typeof recast.types.builders.statement>;
export declare type EmbeddedGraphqlDocument = {
    parsedDocument: graphql.DocumentNode;
    artifact: {
        name: string;
        kind: CompiledDocumentKind;
    };
    node: BaseNode & {
        remove: () => void;
        replaceWith: (node: BaseNode) => void;
    };
    tagContent: string;
    parent: BaseNode;
};
declare type GraphqlTagWalker = {
    where?: (tag: graphql.DocumentNode) => boolean;
    onTag: (tag: EmbeddedGraphqlDocument) => void | Promise<void>;
};
export default function walkTaggedDocuments(config: Config, doc: TransformDocument, parsedScript: Program, walker: GraphqlTagWalker): Promise<void>;
export {};
