"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// externals
const graphql = __importStar(require("graphql"));
const recast = __importStar(require("recast"));
// locals
const common_1 = require("../../common");
const utils_1 = require("../utils");
const AST = recast.types.builders;
// returns the expression that should replace the graphql
async function fragmentProcessor(config, doc) {
    // we need to find any graphql documents in the instance script containing fragments
    // and replace them with an object expression that has the keys that the runtime expects
    // if there is no instance script, we don't about care this file
    if (!doc.instance) {
        return;
    }
    let proxyIdentifier = null;
    // go to every graphql document
    await (0, utils_1.walkTaggedDocuments)(config, doc, doc.instance.content, {
        // with only one definition defining a fragment
        // note: the tags that satisfy this predicate will be added to the watch list
        where(tag) {
            return (tag.definitions.length === 1 &&
                tag.definitions[0].kind === graphql.Kind.FRAGMENT_DEFINITION);
        },
        // if we found a tag we want to replace it with an object that the runtime can use
        async onTag({ artifact, node, tagContent, parent }) {
            // make sure that we have imported the document proxy constructor
            (0, common_1.ensureImports)({
                config,
                body: doc.instance.content.body,
                import: ['HoudiniDocumentProxy'],
                sourceModule: '$houdini/runtime',
            });
            // instantiate a proxy we can use to update this fragment
            proxyIdentifier = [
                AST.identifier(artifact.name + 'Proxy'),
                parent
                    .arguments[1],
            ];
            // // add an import to the body pointing to the artifact
            const storeID = (0, common_1.ensureStoreImport)({
                config,
                body: doc.instance.content.body,
                artifact,
            });
            const artifactID = (0, common_1.ensureArtifactImport)({
                config,
                body: doc.instance.content.body,
                artifact,
            });
            // instantiate a handler for the fragment
            const replacement = AST.objectExpression([
                AST.objectProperty(AST.stringLiteral('kind'), AST.stringLiteral(artifact.kind)),
                AST.objectProperty(AST.stringLiteral('store'), AST.identifier(storeID)),
                AST.objectProperty(AST.stringLiteral('artifact'), AST.identifier(artifactID)),
                AST.objectProperty(AST.literal('proxy'), proxyIdentifier[0]),
                AST.objectProperty(AST.identifier('config'), AST.identifier('houdiniConfig')),
            ]);
            // // if the fragment is paginated we need to add a reference to the pagination query
            // if (tagContent.includes(`@${config.paginateDirective}`)) {
            // 	// add the import to the pagination query
            // 	doc.instance!.content.body.unshift(
            // 		artifactImport(config, { name: config.paginationQueryName(artifact.name) })
            // 	)
            // 	// and a reference in the tag replacement
            // 	replacement.properties.push(
            // 		AST.objectProperty(
            // 			AST.literal('paginationArtifact'),
            // 			AST.identifier(config.paginationQueryName(artifact.name))
            // 		)
            // 	)
            // }
            node.replaceWith(replacement);
        },
    });
    // if we instantiated a proxy we need to leave down a reactive statement
    // that invokes the proxy with new information
    if (!proxyIdentifier) {
        return;
    }
    // find the first non import statement
    const propInsertIndex = doc.instance.content.body.findIndex((expression) => expression.type !== 'ImportDeclaration');
    // instantiate the proxy we'll use for the fragment
    doc.instance.content.body.splice(propInsertIndex, 0, 
    // @ts-ignore: babel's ast does something weird with comments, we won't use em
    AST.variableDeclaration('let', [
        AST.variableDeclarator(proxyIdentifier[0], AST.newExpression(AST.identifier('HoudiniDocumentProxy'), [])),
    ]));
    // we need to add a reactive statement so that we can update the fragment value
    // if the parent id is swapped
    doc.instance.content.body.push(
    // @ts-ignore: babel's ast does something weird with comments, we won't use em
    AST.labeledStatement(AST.identifier('$'), AST.blockStatement([
        AST.expressionStatement(AST.callExpression(AST.memberExpression(proxyIdentifier[0], AST.identifier('invoke')), [proxyIdentifier[1]])),
    ])));
}
exports.default = fragmentProcessor;
