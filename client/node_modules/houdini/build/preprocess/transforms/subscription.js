"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// externals
const graphql = __importStar(require("graphql"));
const recast = __importStar(require("recast"));
// locals
const common_1 = require("../../common");
const utils_1 = require("../utils");
const AST = recast.types.builders;
// returns the expression that should replace the graphql
async function subscriptionProcessor(config, doc) {
    // we need to find any graphql documents in the instance script containing subscriptions
    // and replace them with an object expression that has the keys that the runtime expects
    // if there is no instance script, we don't about care this file
    if (!doc.instance) {
        return;
    }
    // go to every graphql document
    await (0, utils_1.walkTaggedDocuments)(config, doc, doc.instance.content, {
        // with only one definition defining a subscription
        // note: the tags that satisfy this predicate will be added to the watch list
        where(tag) {
            return (tag.definitions.length === 1 &&
                tag.definitions[0].kind === graphql.Kind.OPERATION_DEFINITION &&
                tag.definitions[0].operation === 'subscription');
        },
        // we want to replace it with an object that the runtime can use
        async onTag({ artifact, node }) {
            // the local identifier for the store
            const storeVariable = (0, common_1.ensureStoreImport)({
                config,
                artifact,
                body: doc.instance.content.body,
            });
            // replace the node with an object
            node.replaceWith(AST.objectExpression([
                AST.objectProperty(AST.stringLiteral('kind'), AST.stringLiteral(artifact.kind)),
                AST.objectProperty(AST.literal('store'), AST.identifier(storeVariable)),
                AST.objectProperty(AST.literal('config'), AST.identifier('houdiniConfig')),
            ]));
            // the kind of import depends on the mode
            const importStatement = config.module === 'commonjs'
                ? AST.importDefaultSpecifier
                : AST.importNamespaceSpecifier;
        },
    });
}
exports.default = subscriptionProcessor;
