import { Readable } from 'svelte/store';
import { FragmentStore, QueryResult, QueryStore, QueryStoreFetchParams } from '..';
import { ConfigFile } from './config';
import { GraphQLObject, HoudiniFetchContext, QueryArtifact } from './types';
declare type RefetchFn<_Data = any, _Input = any> = (params?: QueryStoreFetchParams<_Input>) => Promise<QueryResult<_Data, _Input>>;
export declare function wrapPaginationStore<_Data, _Input>(store: QueryStore<_Data, _Input> | ReturnType<FragmentStore<_Data>['get']>): {
    subscribe(this: void, run: import("svelte/store").Subscriber<QueryResult<_Data, _Input>>, invalidate?: ((value?: QueryResult<_Data, _Input> | undefined) => void) | undefined): import("svelte/store").Unsubscriber;
    name: string;
    fetch: (params?: QueryStoreFetchParams<_Input> | undefined) => Promise<QueryResult<_Data, _Input>>;
} | {
    subscribe(this: void, run: import("svelte/store").Subscriber<_Data | null>, invalidate?: ((value?: _Data | null | undefined) => void) | undefined): import("svelte/store").Unsubscriber;
    update: (parent: _Data | null) => void;
};
export declare function fragmentHandlers<_Data extends GraphQLObject, _Input>({ config, paginationArtifact, initialValue, store, }: {
    config: ConfigFile;
    paginationArtifact: QueryArtifact;
    initialValue: _Data | null;
    store: Readable<GraphQLObject | null>;
}): PaginatedHandlers<_Data, _Input>;
export declare function queryHandlers<_Data extends GraphQLObject, _Input>({ config, artifact, store, queryVariables, }: {
    config: ConfigFile;
    artifact: QueryArtifact;
    store: QueryStore<any, any>;
    queryVariables: () => _Input;
    pageInfo?: Readable<PageInfo>;
}): PaginatedHandlers<_Data, _Input>;
export declare type PaginatedDocumentHandlers<_Data, _Input> = {
    loadNextPage(pageCount?: number, after?: string | number): Promise<void>;
    loadPreviousPage(pageCount?: number, before?: string): Promise<void>;
    loading: Readable<boolean>;
    pageInfo: Readable<PageInfo>;
    refetch: (vars?: _Input) => Promise<_Data>;
};
export declare type PaginatedHandlers<_Data, _Input> = {
    loadNextPage(houdiniContext: HoudiniFetchContext, pageCount?: number, after?: string | number): Promise<void>;
    loadPreviousPage(houdiniContext: HoudiniFetchContext, pageCount?: number, before?: string): Promise<void>;
    loading: Readable<boolean>;
    pageInfo: Readable<PageInfo>;
    refetch: RefetchFn<_Data, _Input>;
};
export declare type PageInfo = {
    startCursor: string | null;
    endCursor: string | null;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
};
export declare function extractPageInfo(data: GraphQLObject | null, path: string[]): PageInfo;
export declare function countPage<_Data extends GraphQLObject>(source: string[], value: _Data | null): number;
export declare const nullPageInfo: () => {
    startCursor: null;
    endCursor: null;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
};
export {};
