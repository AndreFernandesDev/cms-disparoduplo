import * as graphql from 'graphql';
import { ConfigFile } from '../runtime/lib';
import { CachePolicy } from '../runtime/lib/types';
export declare class Config {
    filepath: string;
    rootDir: string;
    projectRoot: string;
    schema: graphql.GraphQLSchema;
    apiUrl?: string;
    schemaPath?: string;
    persistedQueryPath?: string;
    sourceGlob: string;
    static?: boolean;
    scalars?: ConfigFile['scalars'];
    framework: 'sapper' | 'kit' | 'svelte';
    module: 'commonjs' | 'esm';
    cacheBufferSize?: number;
    defaultCachePolicy: CachePolicy;
    defaultPartial: boolean;
    definitionsFolder?: string;
    newSchema: string;
    newDocuments: string;
    defaultKeys: string[];
    typeConfig: ConfigFile['types'];
    configFile: ConfigFile;
    logLevel: LogLevel;
    disableMasking: boolean;
    configIsRoute: ((filepath: string) => boolean) | null;
    routesDir: string | null;
    constructor({ filepath, loadFrameworkConfig, ...configFile }: ConfigFile & {
        filepath: string;
        loadFrameworkConfig?: boolean;
    });
    isRoute(filepath: string): boolean;
    loadKitConfig({ isRoute, configFilePath, }: {
        isRoute: boolean;
        configFilePath?: string;
    }): Promise<void>;
    get artifactDirectory(): string;
    private get artifactDirectoryName();
    get artifactTypeDirectory(): string;
    get storesDirectory(): string;
    get metaFilePath(): string;
    private get storesDirectoryName();
    get runtimeDirectory(): string;
    get definitionsDirectory(): string;
    get enumRuntimeDefinitionsPath(): string;
    get enumTypesDefinitionsPath(): string;
    get definitionsSchemaPath(): string;
    get definitionsDocumentsPath(): string;
    get typeIndexPath(): string;
    artifactTypePath(document: graphql.DocumentNode): string;
    artifactPath(document: graphql.DocumentNode): string;
    artifactImportPath(name: string): string;
    storeImportPath(name: string): string;
    storeName({ name }: {
        name: string;
    }): string;
    storeFactoryName(name: string): string;
    keyFieldsForType(type: string): string[];
    computeID(type: string, data: any): string;
    documentName(document: graphql.DocumentNode): string;
    isSelectionScalar(type: string): boolean;
    createDirectories(): Promise<void>;
    get listDirective(): string;
    get listPrependDirective(): string;
    get listAppendDirective(): string;
    get listParentDirective(): string;
    get listDirectiveParentIDArg(): string;
    get listNameArg(): string;
    get insertFragmentSuffix(): string;
    get removeFragmentSuffix(): string;
    get toggleFragmentSuffix(): string;
    get deleteDirectiveSuffix(): string;
    get whenDirective(): string;
    get whenNotDirective(): string;
    get argumentsDirective(): string;
    get withDirective(): string;
    get paginateDirective(): string;
    get paginateNameArg(): string;
    get cacheDirective(): string;
    get cachePartialArg(): string;
    get cachePolicyArg(): string;
    paginationQueryName(documentName: string): string;
    isDeleteDirective(name: string): boolean;
    listDeleteDirective(name: string): string;
    deleteDirectiveType(name: string): string;
    isInsertFragment(name: string): boolean;
    listInsertFragment(name: string): string;
    listToggleFragment(name: string): string;
    isRemoveFragment(name: string): boolean;
    isToggleFragment(name: string): boolean;
    listRemoveFragment(name: string): string;
    isInternalEnum(node: graphql.EnumTypeDefinitionNode): boolean;
    isInternalDirective({ name }: graphql.DirectiveNode): boolean;
    isListFragment(name: string): boolean;
    isListOperationDirective(name: string): boolean;
    isFragmentForList(listName: string, fragmentName: string): boolean;
    listOperationFromFragment(fragmentName: string): 'insert' | 'remove' | 'toggle';
    listNameFromDirective(directiveName: string): string;
    listNameFromFragment(fragmentName: string): string;
}
export declare function readConfigFile(configPath?: string): Promise<ConfigFile>;
export declare function getConfig({ configFile, ...extraConfig }?: {
    configFile?: string;
} & Partial<ConfigFile>): Promise<Config>;
export declare enum LogLevel {
    Full = "full",
    Summary = "summary",
    ShortSummary = "short-summary",
    Quiet = "quiet"
}
