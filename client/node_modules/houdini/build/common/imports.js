"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureImports = exports.ensureArtifactImport = exports.ensureStoreFactoryImport = exports.ensureStoreImport = void 0;
// externals
const recast = __importStar(require("recast"));
const AST = recast.types.builders;
function ensureStoreImport({ config, artifact, body, local, }) {
    return ensureImports({
        config,
        body,
        sourceModule: config.storeImportPath(artifact.name),
        import: local || `_${artifact.name}Store`,
    });
}
exports.ensureStoreImport = ensureStoreImport;
function ensureStoreFactoryImport({ config, artifact, body, }) {
    return ensureImports({
        config,
        body,
        sourceModule: config.storeImportPath(artifact.name),
        import: [`${artifact.name}Store`],
    });
}
exports.ensureStoreFactoryImport = ensureStoreFactoryImport;
function ensureArtifactImport({ config, artifact, body, local, }) {
    return ensureImports({
        config,
        body,
        sourceModule: config.artifactImportPath(artifact.name),
        import: local || `_${artifact.name}Artifact`,
    });
}
exports.ensureArtifactImport = ensureArtifactImport;
function ensureImports({ config, body, import: importID, sourceModule, importKind, }) {
    const idList = Array.isArray(importID) ? importID : [importID];
    // figure out the list of things to import
    const toImport = idList.filter((identifier) => !body.find((statement) => statement.type === 'ImportDeclaration' &&
        statement.specifiers.find((importSpecifier) => (importSpecifier.type === 'ImportSpecifier' &&
            importSpecifier.imported.type === 'Identifier' &&
            importSpecifier.imported.name === identifier &&
            importSpecifier.local.name === identifier) ||
            (importSpecifier.type === 'ImportDefaultSpecifier' &&
                importSpecifier.local.type === 'Identifier' &&
                importSpecifier.local.name === identifier &&
                importSpecifier.local.name === identifier))));
    // add the import if it doesn't exist, add it
    if (toImport.length > 0) {
        body.unshift({
            type: 'ImportDeclaration',
            // @ts-ignore
            source: AST.stringLiteral(sourceModule),
            // @ts-ignore
            specifiers: toImport.map((identifier) => !Array.isArray(importID)
                ? AST.importDefaultSpecifier(AST.identifier(identifier))
                : AST.importSpecifier(AST.identifier(identifier), AST.identifier(identifier))),
            importKind,
        });
    }
    return Array.isArray(importID) ? toImport : toImport[0];
}
exports.ensureImports = ensureImports;
