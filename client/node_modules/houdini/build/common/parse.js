"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findScriptInnerBounds = exports.parseFile = void 0;
const svelte = __importStar(require("svelte/compiler"));
const parser_1 = require("@babel/parser");
async function parseFile(str) {
    // parsing a file happens in two steps:
    // - first we use svelte's parser to find the bounds of the script tag
    // - then we run the contents through babel to parse it
    const preprocessed = await svelte.preprocess(str, [
        {
            script({ content: input }) {
                return {
                    code: input.replace(/\S/g, ' '),
                };
            },
            style({ content: input }) {
                return {
                    code: input.replace(/\S/g, ' '),
                };
            },
        },
    ]);
    // parse the result to find the bounds
    const parsed = svelte.parse(preprocessed.code);
    // build up the result
    const result = { instance: null, module: null };
    // look at the instance and module of the parsed result to find the correct bounds
    for (const which of ['instance', 'module']) {
        // figure out which we're parsing
        const script = parsed[which];
        if (!script) {
            continue;
        }
        // now that we have the bounds we can find the appropriate string to parse
        const [greaterThanIndex, lessThanIndex] = findScriptInnerBounds({
            start: parsed[which].start,
            end: parsed[which].end - 1,
            text: str,
        });
        const string = str.slice(greaterThanIndex, lessThanIndex);
        result[which] = {
            // @ts-ignore
            content: (0, parser_1.parse)(string || '', {
                plugins: ['typescript'],
                sourceType: 'module',
            }).program,
            start: parsed[which].start,
            // end has to exist to get this far
            end: parsed[which].end - 1,
        };
    }
    // we're done here
    return result;
}
exports.parseFile = parseFile;
function findScriptInnerBounds({ start, end, text, }) {
    // {start} points to the < of the opening tag, we want to find the >
    let greaterThanIndex = start;
    // keep looking until the end
    while (greaterThanIndex < end) {
        // if we found the > we can stop looking
        if (text[greaterThanIndex] === '>') {
            break;
        }
        // keep looking
        greaterThanIndex++;
    }
    // if we didn't find it
    if (greaterThanIndex === start) {
        throw new Error('Could not find the end of the tag open');
    }
    // {end} points to the > of the closing tag
    let lessThanIndex = end;
    while (lessThanIndex > greaterThanIndex) {
        // if we found the < we can stop looking
        if (text[lessThanIndex] === '<') {
            break;
        }
        // keep looking
        lessThanIndex--;
    }
    // if we didn't find it
    if (lessThanIndex === end) {
        throw new Error('Could not find the start of the tag close');
    }
    return [greaterThanIndex + 1, lessThanIndex];
}
exports.findScriptInnerBounds = findScriptInnerBounds;
