import type { DocumentNode } from 'graphql';
import { Client, OperationContext, TypedDocumentNode } from '@urql/core';
import { OperationResultStore } from './common';
export declare type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;
export interface MutationArgs<Data = any, Variables = object> {
    client: Client;
    query: string | DocumentNode | TypedDocumentNode<Data, Variables>;
    variables?: Variables;
    context?: Partial<OperationContext>;
}
export declare function mutationStore<Data = any, Result = Data, Variables = object>(args: MutationArgs<Data, Variables>, handler?: SubscriptionHandler<Data, Result>): OperationResultStore<Result, Variables>;
