Object.defineProperty(exports, '__esModule', {
  value: true
});

var core = require('@urql/core');

var wonka = require('wonka');

var store = require('svelte/store');

var svelte = require('svelte');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function fromStore(store$) {
  return wonka.make(function (observer) {
    return store$.subscribe(observer.next);
  });
}

var initialResult = {
  fetching: false,
  stale: false,
  error: undefined,
  data: undefined,
  extensions: undefined
};

function createPausable(isPaused$) {
  return {
    isPaused$: isPaused$,
    pause: function pause() {
      isPaused$.set(true);
    },
    resume: function resume() {
      isPaused$.set(false);
    }
  };
}

function queryStore(args) {
  var request = core.createRequest(args.query, args.variables);

  var context = _extends({}, {
    requestPolicy: args.requestPolicy
  }, args.context);

  var operation = args.client.createRequestOperation('query', request, context);

  var initialState = _extends({}, initialResult, {
    operation: operation
  });

  var result$ = store.writable(initialState, function () {
    return subscription.unsubscribe;
  });
  var isPaused$ = store.writable(!!args.pause);
  var subscription = wonka.subscribe(function (result) {
    result$.set(result);
  })(wonka.scan(function (result, partial) {
    return _extends({}, result, partial);
  }, initialState)(wonka.switchMap(function (isPaused) {
    if (isPaused) {
      return wonka.never;
    }

    return wonka.concat([wonka.fromValue({
      fetching: true,
      stale: false
    }), wonka.map(function (ref) {
      var stale = ref.stale;
      var data = ref.data;
      var error = ref.error;
      var extensions = ref.extensions;
      var operation = ref.operation;
      return {
        fetching: false,
        stale: !!stale,
        data: data,
        error: error,
        operation: operation,
        extensions: extensions
      };
    })(args.client.executeRequestOperation(operation)), wonka.fromValue({
      fetching: false
    })]);
  })(fromStore(isPaused$))));
  return _extends({}, store.derived(result$, function (result, set) {
    set(result);
  }), createPausable(isPaused$));
}

function mutationStore(args, handler) {
  var request = core.createRequest(args.query, args.variables);
  var operation = args.client.createRequestOperation('mutation', request, args.context);

  var initialState = _extends({}, initialResult, {
    operation: operation,
    fetching: true
  });

  var result$ = store.writable(initialState);
  var subscription = wonka.subscribe(function (result) {
    result$.set(result);
  })(wonka.scan(function (result, partial) {
    // If a handler has been passed, it's used to merge new data in
    var data = partial.data !== undefined ? typeof handler === 'function' ? handler(result.data, partial.data) : partial.data : result.data;
    return _extends({}, result, partial, {
      data: data
    });
  }, initialState)(wonka.map(function (ref) {
    var stale = ref.stale;
    var data = ref.data;
    var error = ref.error;
    var extensions = ref.extensions;
    var operation = ref.operation;
    return {
      fetching: false,
      stale: !!stale,
      data: data,
      error: error,
      operation: operation,
      extensions: extensions
    };
  })(args.client.executeRequestOperation(operation))));
  return store.derived(result$, function (result, set) {
    set(result);
    return subscription.unsubscribe;
  });
}

function subscriptionStore(args) {
  var request = core.createRequest(args.query, args.variables);
  var operation = args.client.createRequestOperation('subscription', request, args.context);

  var initialState = _extends({}, initialResult, {
    operation: operation
  });

  var result$ = store.writable(initialState, function () {
    return subscription.unsubscribe;
  });
  var isPaused$ = store.writable(!!args.pause);
  var subscription = wonka.subscribe(function (result) {
    result$.set(result);
  })(wonka.scan(function (result, partial) {
    return _extends({}, result, partial);
  }, initialState)(wonka.switchMap(function (isPaused) {
    if (isPaused) {
      return wonka.never;
    }

    return wonka.concat([wonka.fromValue({
      fetching: true,
      stale: false
    }), wonka.map(function (ref) {
      var stale = ref.stale;
      var data = ref.data;
      var error = ref.error;
      var extensions = ref.extensions;
      var operation = ref.operation;
      return {
        fetching: true,
        stale: !!stale,
        data: data,
        error: error,
        operation: operation,
        extensions: extensions
      };
    })(args.client.executeRequestOperation(operation)), wonka.fromValue({
      fetching: false
    })]);
  })(fromStore(isPaused$))));
  return _extends({}, store.derived(result$, function (result, set) {
    set(result);
  }), createPausable(isPaused$));
}

var _contextKey = '$$_urql';
/** Retrieves a Client from Svelte's context */

function getContextClient() {
  var client = svelte.getContext(_contextKey);

  if (process.env.NODE_ENV !== 'production' && !client) {
    throw new Error('No urql Client was found in Svelte context. Did you forget to call setContextClient?');
  }

  return client;
}

function setContextClient(client) {
  svelte.setContext(_contextKey, client);
}

function initContextClient(args) {
  var client = new core.Client(args);
  setContextClient(client);
  return client;
}

exports.getContextClient = getContextClient;
exports.initContextClient = initContextClient;
exports.mutationStore = mutationStore;
exports.queryStore = queryStore;
exports.setContextClient = setContextClient;
exports.subscriptionStore = subscriptionStore;
Object.keys(core).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return core[k];
    }
  });
});
//# sourceMappingURL=urql-svelte.js.map
